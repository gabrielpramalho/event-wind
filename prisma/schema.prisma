generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Token        Token[]
  Event        Event[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Event {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  photoUrl  String?  @map("photo_url")
  capacity  Int
  dateBegin DateTime
  dateEnd   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String     @map("author_id")
  Sessions Sessions[]

  @@index([slug])
  @@map("events")
}

model Sessions {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  photoUrl  String?  @map("photo_url")
  date      DateTime
  capacity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @map("event_id")

  @@map("sessions")
}
